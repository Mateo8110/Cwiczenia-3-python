Python Compression

A = [x**2 for x in range(10)]
B = [3**i for i in range(6)]
C = [x for x in A if x % 2 != 0]

print(A)
print(B)
print(C)

#Chcemy uzyskać liczby parzyste z podanego przedziału

#Wersja z pętlą

liczby =[1,2,3,4,5,6,7,8,9,10]
lista = []
for i in liczby:
    if i % 2 == 0:
        lista.append(i)

print("Liczby parzyste uzykane z wykorzystaniem pętli")
print(lista)

#wersja z Python comprehension
liczby =[1,2,3,4,5,6,7,8,9,10]
lista2 =[i for i in liczby if i % 2 == 0]
print(lista2)

#można to zrobić krócej
lista2=[(i,j) for i in [1,2,3] for j in [4,5,6]]
print(lista2)

#Słowniki i zmiana klucza z wartoscią

skroty={"PZU": "Państwowy zakład Ubezpieczeń",
        "ZUS": "Zakład Ubezpieczeń Społecznych",
        "PKO": "Powszechna Kasa Oszczędnosci"}

odwrocone = {value: key for key, value in skroty.items()}
print("Oryginalny słownik")
print(skroty)
print("Słownik odwrócony")
print(odwrocone)

Zadanie1. Zdefiniuj następujące zbiory,wykorzystując Python comprehension:

A = [1/x for x in range(1,10)]
B = [2**i for i in range(11)]
C = [x for x in B if x % 4 == 0]

print(A)
print(B)
print(C)

Zadanie 2.Wygeneruj losowo macierz 4x4 i wykorzystując Python Comprehension zdefiniuj listę, która będzie 
zawierała tylko elementy znajdujące się na przekątnej.

import random
#generowanie macierzy 4x4 losowymi wartosciami
macierz = [[random.randint(1,10) for j in range(4)] for i in range(4)]
print(macierz)

#tworzymy listę z elementami na przekątnej macierzy

przekatna = [macierz[i][i] for i in range(4)]
print(przekatna)

Zadanie 3.Utwórz słownik z produktami spożywczymi do kupienia. Klucz to niech będzie nazwa produktu a 
wartość - jednostka w jakiej się je kupuje (np. sztuki, kg itd.). Wykorzystaj Python Comprehension do 
zdefiniowania nowej listy, gdzie będą produkty, których wartość to sztuki.

produkty = {"jajka": "sztuki",
            "mleko": "litry",
            "chleb": "sztuki",
            "banany": "kg",
            "ser": "gramy",
            "makaron": "szt"}

produkty_sztuki = [produkt for produkt, jednostka in produkty.items() if jednostka == "sztuki"]
print(produkty_sztuki)

Zadanie 4. #Zdefiniuj funkcję, która będzie badać monotoniczność funkcji liniowej:
#y = a x + b
#Funkcja jest rosną ca gdy a>0
#malejąca jeżeli a<0
#stała gdy a=0
#i w zależności od tego będzie wyświetlać odpowiedni komunikat.
/////////////////////
def monotonicznosc_funkcji_liniowej(a):
    if a > 0:
        print("Funkcja jest rosnąca.")
    elif a < 0:
        print("Funkcja jest malejąca.")
    else:
        print("Funkcja jest stała.")

monotonicznosc_funkcji_liniowej(2)
monotonicznosc_funkcji_liniowej(-3)
monotonicznosc_funkcji_liniowej(0)

Zadanie 5. Napisz funkcję, która będzie sprawdzać czy dwie proste są równoległe czy prostopadłe: 
Proste dane równaniami y=a1x+b1, y=a2x+b2, są 
równolegle gdy a1=a2
prostopadłe gdy a1a2=-1

def proste(a1, a2):
    if a1==a2:
        print("Proste są równoległe.")
    elif a1*a2==-1:
        print("proste są prostopadłe.")
    else:
        print("proste nie sa ani prostopadłe, ani równoległe")

proste(1, -1)

Zadanie 6.Zdefiniuj funkcję, która oblicza długość przeciwprostokątnej, wykorzystując twierdzenie pitagorasa.
#Proszę podać wartości domyślne dla funkcji

import math

def twPitagorasa(a, b):
    c = a**2 + b**2
    return math.sqrt(c)

print(twPitagorasa(5, 12))

Zadanie 7.Zdefiniuj funkcję, która zwraca sumę dowolnego ciągu arytmetycznego. 
Funkcja niech przyjmuje jako parametry: a1 (wartość początkowa), r (wielkość o ile rosną kolejne 
elementy) i ile_elementów (ile elementów ma sumować). Ponadto funkcja niech przyjmuje wartości 
domyślne: a1= 1, r=1, ile=10.

def Suma_Ciagu_Arytmetycznego(a1=1, r=1, ile_elementow=10):
    #inicjalizujemy zmienną sumy
    suma = 0

    #dodajemy kolejne elementy ciągu
    for i in range(ile_elementow):
        suma += a1 + i * r
    #zwracamy sumę
    return suma

print(Suma_Ciagu_Arytmetycznego())

Zadanie 8. Wykorzystując poprzedni przykład zdefiniuj funkcję, która będzie liczyć iloczyn elementów ciągu.

PRZYKŁADOWE.
#symbol * oznacza dowolną ilość argumentów przechowywanych w krotce

def ciag(* liczby):
    #jeżeli nie ma argumentów to
    if len(liczby) == 0:
        return 0.0
    else:
        suma = 0.0
        #sumujemy elementy ciągu
        for i in liczby:
            suma += i
        #zwracamy wartość sumy
        return suma
#wywoływanie gdy brak argumentów
print(ciag())
#podajemy argumenty
print(ciag(1,2,3,4,5,6,7,8))

Poprawnie zrobione'

#symbol * oznacza dowolną ilość argumentów przechowywanych w krotce

def ciag(* ciag):
    #jeżeli nie ma argumentów to
    if len(ciag) == 0:
        return 0.0
    else:
        iloczyn = 1
        #mnożymy elementy ciągu
        for element in ciag:
            iloczyn *= element
        #zwracamy wartość iloczynu
        return iloczyn
#wywoływanie gdy brak argumentów
print(ciag())
#podajemy argumenty
print(ciag(1,2,3,4,5,6,7,8))

Zadanie 9. Napisz funkcję, która wykorzystuje symbol **. Funkcja ma przyjmować listę zakupów w postaci: klucz 
to nazwa produktu a wartość to ilość. Funkcja ma zliczyć ile jest wszystkich produktów w ogóle i 
zwracać tę wartość.
** czyli dwie gwiazdki oznaczają że możemy użyć dowolna ilość argumentów z kluczem

def ListaZakupow(** Lista):
    ilosc_prod = 0
    for ilosc in Lista.values():
        ilosc_prod += ilosc
    return ilosc_prod

print("łączna ilosc produktow: ")
print(ListaZakupow(Makaron=4,Pesto=2,Masło=1,Chleb=2))




Przykładowa lista oparta na słowniku:

def zlicz_produkty(zakupy):
    ilosc_produktow = 0
    for ilosc in zakupy.values():
        ilosc_produktow += ilosc
    return ilosc_produktow

zakupy = {"Olej": 2, "Masło": 1, "mleko": 3, "jajka": 12}
ilosc_produktow = zlicz_produkty(zakupy)
print(f"łącznie kupiono {ilosc_produktow} produktów.")




Zadanie 10.
Zadanie 11: 

Pakiet Ciagi :(zawartosc)

__init__.py  ///////////////////////

__all__ = ["CiagiArytmetyczne", "CiagiGeometryczne"]

CiagiArytmetyczne.py  //////////////////

def Ciag_Ary(pierwszy_wyraz, róznica, n):
    """
    Funkcja zwraca n-ty wyraz ciągu arytmetycznego o pierwszym 	wyrazie
    i różnicy .
    """
    nty_wyraz = pierwszy_wyraz + (n - 1) * róznica
    return nty_wyraz

CiagiGeometryczne.py  ////////////////

def Ciag_Geo(pierwszy_wyraz, iloraz, n):
    """
    Funkcja zwraca n-ty wyraz ciągu geometrycznego o pierwszym wyrazie
    i ilorazie.
    """
    nty_wyraz = pierwszy_wyraz * iloraz ** (n - 1)
    return nty_wyraz

Odwołanie do pakietu w programie głownym:

import Ciagi.CiagiArytmetyczne, Ciagi.CiagiGeometryczne

a = 2
b = 1
n = 6
print(Ciagi.CiagiArytmetyczne.Ciag_Ary(a, b, n))
print(Ciagi.CiagiGeometryczne.Ciag_Geo(a, b, n))
